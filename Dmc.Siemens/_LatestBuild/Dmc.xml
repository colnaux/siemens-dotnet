<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dmc</name>
    </assembly>
    <members>
        <member name="T:Dmc.IO.InstalledApplicationLauncher">
            <summary>
            Launches an external executable based on its installation path
            </summary>
        </member>
        <member name="F:Dmc.IO.InstalledApplicationLauncher._InstalledDisplayNameValues">
            <summary>
            Enumerable collection of possible values for the display name subkey (i.e. the product name as displayed in the installed programs control panel).
            (Some applications have different display names depending upon application version and O/S version.)
            </summary>
        </member>
        <member name="F:Dmc.IO.InstalledApplicationLauncher._ExecutableFileSubpath">
            <summary>
            The subpath and filename of the executable relative to the entire application install path
            </summary>
        </member>
        <member name="P:Dmc.IO.InstalledApplicationLauncher.WaitForExit">
            <summary>
            Gets or sets flag indicating if the calling application should wait for this executable to exit before continuing
            </summary>
            <value>
            Flag indicating if the calling application should wait for this executable to exit before continuing
            </value>
        </member>
        <member name="M:Dmc.IO.InstalledApplicationLauncher.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="installedDisplayNameValues">Value of display name subkey (i.e. the product name as displayed in the installed programs control panel)</param>
            <param name="executableFileSubpath">The subpath and filename of the executable relative to the entire application install path.</param>
            <param name="waitForExit">If set to <c>true</c>, the calling application should wait for this executable to exit before continuing.</param>
        </member>
        <member name="M:Dmc.IO.InstalledApplicationLauncher.Run(System.String)">
            <summary>
            Launch the application as a separate process
            </summary>
            <param name="arguments">Command line arguments for the appliation.</param>
            <returns>Returns the ID of the running process if the path to the application executable is found and the application launched. Returns <c>-1</c> if the path can't be found.</returns>
        </member>
        <member name="M:Dmc.IO.InstalledApplicationLauncher.GetInstallPath">
            <summary>
            Get the path to the application from the installation registry subkey and the subpath of the executable itself.
            </summary>
            <returns>Returns the path to the application exectutable if the path is found. Returns the empty string <c>""</c> if the path can't be found.</returns>
        </member>
        <member name="T:Dmc.IO.FileHelpers">
            <summary>
            Helper class for interacting with file IO.
            </summary>
        </member>
        <member name="M:Dmc.IO.FileHelpers.CheckValidFilePath(System.String,System.String)">
            <summary>
            Checks if a file path is valid and optionally if the extention is correct
            </summary>
            <param name="path">The file path.</param>
            <param name="extension">The file extension.  null if no extension check is required.</param>
            <returns>True if file path (and optionally file extension) is valid.</returns>
        </member>
        <member name="M:Dmc.IO.FileHelpers.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies all contents of a directory (recursively) to another location.  300 files/subdirectories maximum.
            WARNING: This can be very dangerous at blindly deleting files and directories.  BE CAREFUL!
            </summary>
            <param name="sourceDirectoryPath">The source directory path.</param>
            <param name="destinationDirectoryPath">The destination directory path.</param>
            <param name="overwriteIfExists">Overwrites destination directory if it already exists, if set to <c>true</c>.</param>
        </member>
        <member name="M:Dmc.IO.FileHelpers.CountFilesAndSubDirectories(System.IO.DirectoryInfo)">
            <summary>
            Counts the files and sub directories in a directory.
            </summary>
            <param name="directory">The directory.</param>
            <returns>Number of files and sub directories, recursively.</returns>
        </member>
        <member name="M:Dmc.IO.FileHelpers.CountFilesAndSubDirectories(System.String)">
            <summary>
            Counts the files and sub directories in a directory.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <returns>Number of files and sub directories, recursively.</returns>
        </member>
        <member name="F:Dmc.Logging.EventLog.EventLogger">
            <summary>
            The current class logger
            </summary>
        </member>
        <member name="M:Dmc.Logging.EventLog.Initialize">
            <summary>
            Initializes the specified update memory log.
            </summary>
            <param name="updateMemoryLog">if set to <c>true</c> [update memory log].</param>
        </member>
        <member name="M:Dmc.Logging.EventLog.Initialize(System.String)">
            <summary>
            Initializes the specified log dir.
            </summary>
            <param name="logDir">The log dir.</param>
            <param name="updateMemoryLog">if set to <c>true</c> [update memory log].</param>
        </member>
        <member name="M:Dmc.Logging.EventLog.InitializeConfig(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes the event log with the given settings of file size and folder size.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:Dmc.Logging.EventLog.LogTrace(System.String,System.Object[])">
            <summary>
            Logs the trace message to the event log. Use for debugging purposes only.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="args">The arguments used to populate tags in the message.</param>
        </member>
        <member name="M:Dmc.Logging.EventLog.LogDebug(System.String,System.Object[])">
            <summary>
            Logs the debug message to the event log.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="args">The arguments used to populate tags in the message.</param>
        </member>
        <member name="M:Dmc.Logging.EventLog.LogInfo(System.String,System.Object[])">
            <summary>
            Logs the info message to the event log.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="args">The arguments used to populate tags in the message.</param>
        </member>
        <member name="M:Dmc.Logging.EventLog.LogWarn(System.String,System.Object[])">
            <summary>
            Logs the warn message to the event log.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="args">The arguments used to populate tags in the message.</param>
        </member>
        <member name="M:Dmc.Logging.EventLog.LogError(System.String,System.Object[])">
            <summary>
            Logs the error message to the event log.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="args">The arguments used to populate tags in the message.</param>
        </member>
        <member name="M:Dmc.Logging.EventLog.LogFatal(System.String,System.Object[])">
            <summary>
            Logs the fatal message to the event log.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="args">The arguments used to populate tags in the message.</param>
        </member>
        <member name="P:Dmc.Logging.DmcLogItem.Timestamp">
            <summary>
            Gets or sets the timestamp.
            </summary>
            <value>
            The timestamp.
            </value>
        </member>
        <member name="P:Dmc.Logging.DmcLogItem.Severity">
            <summary>
            Gets or sets the severity.
            </summary>
            <value>
            The severity.
            </value>
        </member>
        <member name="P:Dmc.Logging.DmcLogItem.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
    </members>
</doc>
