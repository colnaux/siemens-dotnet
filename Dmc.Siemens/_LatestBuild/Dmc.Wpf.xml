<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dmc.Wpf</name>
    </assembly>
    <members>
        <member name="T:Dmc.Wpf.Base.INotifyCollectionChangedExtension">
            <summary>
            Interface that allows for easy implementation of INotifyPropertyChanged via extension methods
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.INotifyCollectionChangedExtension.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Throws the CollectionChanged event.
            </summary>
            <param name="e">CollectionChanged event args.</param>
        </member>
        <member name="T:Dmc.Wpf.Base.NccExtensions">
            <summary>
            Extention methods for INotifyPropertyChangedExtension
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Calls the static collection changed method and notifies any properties of changes.
            </summary>
            <param name="args">Event args for a collection change.</param>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged``1(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged``1(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged``1(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged``1(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged``1(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionReset(Dmc.Wpf.Base.INotifyCollectionChangedExtension)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dmc.Wpf.Base.NccExtensions.EnumerableToList``1(System.Collections.Generic.IEnumerable{``0})" -->
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NccExtensions.FireCollectionChanged(Dmc.Wpf.Base.INotifyCollectionChangedExtension,System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="T:Dmc.Wpf.Base.NotifyCollectionChanged">
            <summary>
            Defines a base implementation class for the INotifyCollectionChanged interface
            </summary>
            <seealso cref="T:Dmc.Wpf.Base.NotifyPropertyChanged" />
            <seealso cref="T:System.Collections.Specialized.INotifyCollectionChanged" />
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireNotifyCollectionChanged(System.Collections.Specialized.INotifyCollectionChanged,System.Collections.Specialized.NotifyCollectionChangedEventHandler,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Fires a notify collection changed event to the provided event handlers.
            </summary>
            <param name="sender">The collection that has changed.</param>
            <param name="handler">The event handler(s) to receive the event.</param>
            <param name="args">Event arguments detailing the extent of the collection change.</param>
            <returns></returns>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Calls the static collection changed method and notifies any properties of changes.
            </summary>
            <param name="args">Event args for a collection change.</param>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged``1(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged``1(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged``1(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged``1(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged``1(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionReset">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.OnDisposed">
            <summary>
            Called when [disposed].  Unsbscribes all from CollectionChanged event
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dmc.Wpf.Base.NotifyCollectionChanged.EnumerableToList``1(System.Collections.Generic.IEnumerable{``0})" -->
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="T:Dmc.Wpf.Base.NotifyPropertyChanged">
            <summary>
            Default DMC implementation of the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyPropertyChanged.SetProperty``1(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.PropertyChangedEventHandler,``0@,``0,System.String)">
            <summary>
            Sets a property to a new value and fires the PropertyChanged event.
            </summary>
            <typeparam name="T">Type of the property</typeparam>
            <param name="sender">The Caller.</param>
            <param name="handler">The event.</param>
            <param name="original">The original property value.</param>
            <param name="value">The new value.</param>
            <param name="property">The name of the property being changed.</param>
            <returns>Returns <c>true</c> if the property is set and the property changed event fires. Returns <c>false</c> if <paramref name="original"/> equals <paramref name="value"/>.</returns>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyPropertyChanged.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets a property to a new value and fires the PropertyChanged event.
            </summary>
            <typeparam name="T">Type of the property</typeparam>
            <param name="original">The original property value.</param>
            <param name="value">The new value.</param>
            <param name="property">The name of the property being changed.</param>
            <returns>Returns <c>true</c> if the property is set and the property changed event fires. Returns <c>false</c> if <paramref name="original"/> equals <paramref name="value"/>.</returns>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyPropertyChanged.FirePropertyChanged(System.String)">
            <summary>
            Fires the property changed event for the <paramref name="property"/>.
            </summary>
            <param name="property">The name of the property being changed.</param>
            <returns>Returns <c>true</c> if the event is fired successfully. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyPropertyChanged.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyPropertyChanged.OnDisposed">
            <summary>
            Called when [disposed].
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NotifyPropertyChanged.FireNotifyPropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Fires the notify property changed event for the <paramref name="property"/>.
            </summary>
            <param name="sender">The caller.</param>
            <param name="handler">The event.</param>
            <param name="property">The name of the property being changed.</param>
            <returns>Returns <c>true</c> if the event is fired successfully. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="E:Dmc.Wpf.Base.NotifyPropertyChanged.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Dmc.Wpf.Base.INotifyPropertyChangedExtension">
            <summary>
            Interface that allows for easy implementation of INotifyPropertyChanged via extension methods
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.INotifyPropertyChangedExtension.FirePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Throws the PropertyChanged event
            </summary>
            <param name="e">PropertyChanged event arguments</param>
        </member>
        <member name="T:Dmc.Wpf.Base.NpcExtensions">
            <summary>
            Extention methods for INotifyPropertyChangedExtension
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Base.NpcExtensions.SetProperty``1(Dmc.Wpf.Base.INotifyPropertyChangedExtension,``0@,``0,System.String)">
            <summary>
            Fires the PropertyChanged event for the <paramref name="property"/>.
            </summary>
            <typeparam name="T">Any object</typeparam>
            <param name="sender">The INotifyPropertyChangedExtension implementor</param>
            <param name="handler">The PropertyChanged event</param>
            <param name="original">Reference to the current value of the <paramref name="property"/></param>
            <param name="value">Requested new value of the <paramref name="property"/></param>
            <param name="property">The name of the property</param>
            <returns>Returns <c>true</c> if the event is fired successfully. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Dmc.Wpf.Base.NpcExtensions.FirePropertyChanged(Dmc.Wpf.Base.INotifyPropertyChangedExtension,System.String)">
            <summary>
            Fires the property changed event for the <paramref name="property"/>.
            </summary>
            <param name="property">The name of the property being changed.</param>
            <returns>Returns <c>true</c> if the event is fired successfully. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Dmc.Wpf.Base.NpcExtensions.AreValuesEqual``1(``0,``0)">
            <summary>
            Check if the two values are equal.
            </summary>
            <typeparam name="T">Type of value being compared</typeparam>
            <param name="original">The original value.</param>
            <param name="value">The new value.</param>
            <returns>Returns <c>true</c> if the two values are equal and <c>false</c> if they are not.</returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableDictionary`2.GetEntry(`0)">
            <summary>
            Gets the entry of the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableDictionary`2.ClearItems">
            <summary>
            Called by base class Collection&lt;T&gt; when the list is being cleared;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableDictionary`2.RemoveItem(`0)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is removed from list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableDictionary`2.AddItem(`0,`1)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is added to list;
            raises a CollectionChanged event to any listeners.
            </summary>
            <exception cref="T:System.ArgumentNullException">Key is null.</exception>
            <exception cref="T:System.ArgumentException">If key already exists in dictionary.</exception>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableDictionary`2.SetItem(`0,`1)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is set in list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableDictionary`2.CopyItems(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is set in list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableDictionary`2.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Calls the static collection changed method and notifies any properties of changes.
            </summary>
            <param name="args">Event args for a collection change.</param>
        </member>
        <member name="T:Dmc.Wpf.Collections.ObservableHashSet`1">
            <summary>
            Represents an observable set of hashed values.
            </summary>
            <typeparam name="T">The type of elements in the hash set.</typeparam> 
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> class.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new set.</param>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> class.
            </summary>
            <param name="comparer">The IEqualityComparer&lt;T&gt; implementation to use when comparing values in the set, or null to use the default EqualityComparer&lt;T&gt; implementation for the set type.</param>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new set.</param>
            <param name="comparer">The IEqualityComparer&lt;T&gt; implementation to use when comparing values in the set, or null to use the default EqualityComparer&lt;T&gt; implementation for the set type.</param>
        </member>
        <member name="F:Dmc.Wpf.Collections.ObservableHashSet`1.BaseHashSet">
            <summary>
            Backing HashSet to store values
            </summary>
        </member>
        <member name="P:Dmc.Wpf.Collections.ObservableHashSet`1.Comparer">
            <summary>
            Gets the IEqualityComparer&lt;T&gt; object that is used to determine equality for the values in the set.
            </summary>
        </member>
        <member name="P:Dmc.Wpf.Collections.ObservableHashSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/>.
              </returns>
        </member>
        <member name="P:Dmc.Wpf.Collections.ObservableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.Add(`0)">
            <summary>
            Adds the specified element to a set.
            </summary>
            <param name="item">The element to add to the set.</param>
            <returns>true if the element is added to the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object; false if the element is already present.</returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.Clear">
            <summary>
            Removes all elements from a <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object.
            </summary>        
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.Contains(`0)">
            <summary>
            Determines whether a <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object contains the specified element.
            </summary>
            <param name="item">The element to locate in the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object.</param>
            <returns>true if the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object contains the specified element; otherwise, false.</returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.CopyTo(`0[])">
            <summary>
            Copies the elements of a <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> collection to an array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object. The array must have zero-based indexing.</param>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of a <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> collection to an array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies the elements of a <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> collection to an array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <param name="count">The number of elements to copy to array.</param>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all elements in the specified collection from the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object.
            </summary>
            <param name="other">The collection of items to remove from the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object.</param>        
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/>.
            </summary>
            <returns>A <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/>.Enumerator object for the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object.</returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object to contain only elements that are present in that object and in the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object.</param>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object is a proper subset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object.</param>
            <returns>true if the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object is a proper subset of other; otherwise, false.</returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object is a proper subset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object. </param>
            <returns>true if the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object is a proper superset of other; otherwise, false.</returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object is a subset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object. </param>
            <returns>true if the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object is a subset of other; otherwise, false.</returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object is a superset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object. </param>
            <returns>true if the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object is a superset of other; otherwise, false.</returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object and a specified collection share common elements.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object. </param>
            <returns>true if the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object and other share at least one common element; otherwise, false.</returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.Remove(`0)">
            <summary>
            Removes the specified element from a <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object.
            </summary>
            <param name="item">The element to remove.</param>
            <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if item is not found in the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object.</returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.RemoveWhere(System.Predicate{`0})">
            <summary>
            Removes elements from the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object based on the predicate.
            </summary>
            <param name="match">The prediate to match items to be removed.</param>
            <returns>number of elements successfully matched and removed.</returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object and the specified collection contain the same elements.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object. </param>
            <returns>true if the <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object is equal to other; otherwise, false.</returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object to contain only elements that are present either in that object or in the specified collection, but not both.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object.</param>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.TrimExcess">
            <summary>
            Sets the capacity of a <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object to contain all elements that are present in itself, the specified collection, or both.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:Dmc.Wpf.Collections.ObservableHashSet`1"/> object.</param>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.AddItem(`0)">
            <summary>
            Adds an item to the HashSet
            </summary>
            <param name="item">Item to be added.</param>
            <returns></returns>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.RemoveItem(`0)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is removed from list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.RemoveItemsWhere(System.Predicate{`0})">
            <summary>
            Called by base class Collection&lt;T&gt; when a selection of items are removed from list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Collections.ObservableHashSet`1.ClearItems">
            <summary>
            Called by base class Collection&lt;T&gt; when the list is being cleared;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="T:Dmc.Wpf.Commands.RelayCommand">
            <summary>
            Relay command implementation of the <see cref="T:System.Windows.Input.ICommand"/> interface.  This is used by all View Models.
            </summary>
        </member>
        <member name="F:Dmc.Wpf.Commands.RelayCommand._Delegate">
            <summary>
            The Action to be executed
            </summary>
        </member>
        <member name="F:Dmc.Wpf.Commands.RelayCommand._CanExecute">
            <summary>
            The predicate determining if <see cref="F:Dmc.Wpf.Commands.RelayCommand._Delegate"/> action can occur.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Commands.RelayCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dmc.Wpf.Commands.RelayCommand"/> class.
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Commands.RelayCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Dmc.Wpf.Commands.RelayCommand"/> class.
            </summary>
            <param name="task">The action to be executed.</param>
        </member>
        <member name="M:Dmc.Wpf.Commands.RelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Dmc.Wpf.Commands.RelayCommand"/> class.
            </summary>
            <param name="task">The action to be executed.</param>
            <param name="canExecute">The predite determining if the execution action can be executed.</param>
        </member>
        <member name="M:Dmc.Wpf.Commands.RelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Dmc.Wpf.Commands.RelayCommand.SetCanExecute(System.Predicate{System.Object})">
            <summary>
            Sets the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="M:Dmc.Wpf.Commands.RelayCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="E:Dmc.Wpf.Commands.RelayCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Dmc.Wpf.Concurrent.UIDispatcher">
            <summary>
            Helper class to run operations on the UI thread using the Dispatcher
            </summary>
        </member>
        <member name="M:Dmc.Wpf.Concurrent.UIDispatcher.Invoke(System.Action)">
            <summary>
            Invokes the specified action on the UI thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Dmc.Wpf.Concurrent.UIDispatcher.Invoke``1(System.Action{``0},``0)">
            <summary>
            Invokes the specified action on the UI thread with the provided generic argument.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:Dmc.Wpf.Concurrent.UIDispatcher.Invoke``1(System.Func{``0})">
            <summary>
            Invokes the specified action on the UI thread and returns the result of the function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The function.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:Dmc.Wpf.Concurrent.UIDispatcher.InvokeAsync(System.Action)">
            <summary>
            Invokes the action on the UI thread but returns a Task.
            </summary>
            <param name="action">The action.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="M:Dmc.Wpf.Concurrent.UIDispatcher.InvokeAsync``1(System.Action{``0},``0)">
            <summary>
            Invokes the action on the UI thread with the provided argument but returns a Task.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <param name="arg">The argument.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="M:Dmc.Wpf.Concurrent.UIDispatcher.InvokeAsync``1(System.Func{``0})">
            <summary>
            Invokes the function on the UI thread with the provided argument but returns a Task.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns>An awaitable generic Task.</returns>
        </member>
        <member name="M:Dmc.Wpf.Concurrent.UIDispatcher.BeginInvoke(System.Action)">
            <summary>
            Begins the action on the UI thread and returns an awaitable DispatcherOperation.
            </summary>
            <param name="action">The action.</param>
            <returns>An awaitable DispatcherOperation.</returns>
        </member>
        <member name="M:Dmc.Wpf.Concurrent.UIDispatcher.BeginInvoke``1(System.Action{``0},``0)">
            <summary>
            Begins the action on the UI thread with the given argument and returns an awaitable DispatcherOperation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <param name="arg">The argument.</param>
            <returns>An awaitable DispatcherOperation</returns>
        </member>
        <member name="M:Dmc.Wpf.Concurrent.UIDispatcher.BeginInvokeAsync(System.Action)">
            <summary>
            Begins the action on the UI thread with the provided argument but returns a Task.
            </summary>
            <param name="action">The action.</param>
            <returns>An awaitable Task.</returns>
        </member>
        <member name="M:Dmc.Wpf.Concurrent.UIDispatcher.BeginInvoke``1(System.Func{``0})">
            <summary>
            Invokes the function asynchronously on the UI thread and returns the result synchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns>The return type of the function.</returns>
        </member>
        <member name="M:Dmc.Wpf.Concurrent.UIDispatcher.BeginInvokeAsync``1(System.Func{``0})">
            <summary>
            Begins the action on the UI thread with the provided argument but returns a generic Task.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns>An awaitable generic Task.</returns>
        </member>
        <member name="T:Dmc.Wpf.Interactivity.EventCommand">
            <summary>
            Attached behavior for handling routed events with an ICommand.
            </summary>
        </member>
        <member name="T:Dmc.Wpf.Interactivity.Interaction">
            <summary>
            Attached behavior for handling routed events with an ICommand.
            </summary>
        </member>
        <member name="T:Dmc.Wpf.Interactivity.EventTriggerCollection">
            <summary>
            Represents a collection of EventTrigger objects for Interaction binding
            </summary>
        </member>
        <member name="T:Dmc.Wpf.ViewModels.DmcViewModel">
            <summary>
            Generic DMC View Model class
            </summary>
        </member>
        <member name="P:Dmc.Wpf.ViewModels.DmcViewModel.IsDebug">
            <summary>
            Gets a value indicating whether this instance is debug.
            </summary>
            <value>
              <c>true</c> if this instance is debug; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dmc.Wpf.ViewModels.DmcViewModel.IsDesignTime">
            <summary>
            Gets a value indicating whether this instance is design time.
            </summary>
            <value>
            <c>true</c> if this instance is design time; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dmc.Wpf.ViewModels.DmcViewModel.AppVersion">
            <summary>
            Gets a string representation of the main executable's version.
            </summary>
        </member>
        <member name="T:Dmc.Wpf.Interfaces.IViewModel">
            <summary>
            Common ViewModel interface for inheritance
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
    </members>
</doc>
